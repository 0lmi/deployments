// Copyright 2016 Mender Software AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package mocks

import (
	"time"

	"github.com/mendersoftware/deployments/resources/deployments"
	"github.com/stretchr/testify/mock"
)

// DeploymentsStorage is an autogenerated mock type for the DeploymentsStorage type
type DeploymentsStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *DeploymentsStorage) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *DeploymentsStorage) FindByID(id string) (*deployments.Deployment, error) {
	ret := _m.Called(id)

	var r0 *deployments.Deployment
	if rf, ok := ret.Get(0).(func(string) *deployments.Deployment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployments.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *DeploymentsStorage) Find(query deployments.Query) ([]*deployments.Deployment, error) {
	ret := _m.Called(query)

	return ret.Get(0).([]*deployments.Deployment), ret.Error(1)
}

// Insert provides a mock function with given fields: deployment
func (_m *DeploymentsStorage) Insert(deployment *deployments.Deployment) error {
	ret := _m.Called(deployment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*deployments.Deployment) error); ok {
		r0 = rf(deployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *DeploymentsStorage) UpdateStats(id string, state_from, state_to string) error {
	ret := _m.Called(id, state_from, state_to)

	return ret.Error(0)
}

func (_m *DeploymentsStorage) Finish(id string, when time.Time) error {
	ret := _m.Called(id, when)

	return ret.Error(0)
}
