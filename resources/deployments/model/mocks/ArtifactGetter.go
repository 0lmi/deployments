// Code generated by mockery v1.0.0
package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/deployments/model"

// ArtifactGetter is an autogenerated mock type for the ArtifactGetter type
type ArtifactGetter struct {
	mock.Mock
}

// ImageByIdsAndDeviceType provides a mock function with given fields: ctx, ids, deviceType
func (_m *ArtifactGetter) ImageByIdsAndDeviceType(ctx context.Context, ids []string, deviceType string) (*model.SoftwareImage, error) {
	ret := _m.Called(ctx, ids, deviceType)

	var r0 *model.SoftwareImage
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) *model.SoftwareImage); ok {
		r0 = rf(ctx, ids, deviceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SoftwareImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, ids, deviceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageByNameAndDeviceType provides a mock function with given fields: ctx, name, deviceType
func (_m *ArtifactGetter) ImageByNameAndDeviceType(ctx context.Context, name string, deviceType string) (*model.SoftwareImage, error) {
	ret := _m.Called(ctx, name, deviceType)

	var r0 *model.SoftwareImage
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.SoftwareImage); ok {
		r0 = rf(ctx, name, deviceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SoftwareImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, deviceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImagesByName provides a mock function with given fields: ctx, artifactName
func (_m *ArtifactGetter) ImagesByName(ctx context.Context, artifactName string) ([]*model.SoftwareImage, error) {
	ret := _m.Called(ctx, artifactName)

	var r0 []*model.SoftwareImage
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.SoftwareImage); ok {
		r0 = rf(ctx, artifactName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SoftwareImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, artifactName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
