// Copyright 2016 Mender Software AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package mocks

import deployments "github.com/mendersoftware/deployments/resources/deployments"
import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/deployments/resources/deployments/model"
import time "time"

// DeviceDeploymentStorage is an autogenerated mock type for the DeviceDeploymentStorage type
type DeviceDeploymentStorage struct {
	mock.Mock
}

// AbortDeviceDeployments provides a mock function with given fields: deploymentID
func (_m *DeviceDeploymentStorage) AbortDeviceDeployments(deploymentID string) error {
	ret := _m.Called(deploymentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggregateDeviceDeploymentByStatus provides a mock function with given fields: id
func (_m *DeviceDeploymentStorage) AggregateDeviceDeploymentByStatus(id string) (deployments.Stats, error) {
	ret := _m.Called(id)

	var r0 deployments.Stats
	if rf, ok := ret.Get(0).(func(string) deployments.Stats); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(deployments.Stats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecommissionDeviceDeployments provides a mock function with given fields: deviceId
func (_m *DeviceDeploymentStorage) DecommissionDeviceDeployments(deviceId string) error {
	ret := _m.Called(deviceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistAssignedImageWithIDAndStatuses provides a mock function with given fields: id, statuses
func (_m *DeviceDeploymentStorage) ExistAssignedImageWithIDAndStatuses(id string, statuses ...string) (bool, error) {
	ret := _m.Called(id, statuses)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...string) bool); ok {
		r0 = rf(id, statuses...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(id, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllDeploymentsForDeviceIDWithStatuses provides a mock function with given fields: deviceID, statuses
func (_m *DeviceDeploymentStorage) FindAllDeploymentsForDeviceIDWithStatuses(deviceID string, statuses ...string) ([]deployments.DeviceDeployment, error) {
	ret := _m.Called(deviceID, statuses)

	var r0 []deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(string, ...string) []deployments.DeviceDeployment); ok {
		r0 = rf(deviceID, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(deviceID, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOldestDeploymentForDeviceIDWithStatuses provides a mock function with given fields: deviceID, statuses
func (_m *DeviceDeploymentStorage) FindOldestDeploymentForDeviceIDWithStatuses(deviceID string, statuses ...string) (*deployments.DeviceDeployment, error) {
	ret := _m.Called(deviceID, statuses)

	var r0 *deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(string, ...string) *deployments.DeviceDeployment); ok {
		r0 = rf(deviceID, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(deviceID, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceDeploymentStatus provides a mock function with given fields: deploymentID, deviceID
func (_m *DeviceDeploymentStorage) GetDeviceDeploymentStatus(deploymentID string, deviceID string) (string, error) {
	ret := _m.Called(deploymentID, deviceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(deploymentID, deviceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(deploymentID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceStatusesForDeployment provides a mock function with given fields: deploymentID
func (_m *DeviceDeploymentStorage) GetDeviceStatusesForDeployment(deploymentID string) ([]deployments.DeviceDeployment, error) {
	ret := _m.Called(deploymentID)

	var r0 []deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(string) []deployments.DeviceDeployment); ok {
		r0 = rf(deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasDeploymentForDevice provides a mock function with given fields: deploymentID, deviceID
func (_m *DeviceDeploymentStorage) HasDeploymentForDevice(deploymentID string, deviceID string) (bool, error) {
	ret := _m.Called(deploymentID, deviceID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(deploymentID, deviceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(deploymentID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMany provides a mock function with given fields: deployment
func (_m *DeviceDeploymentStorage) InsertMany(deployment ...*deployments.DeviceDeployment) error {
	ret := _m.Called(deployment)

	var r0 error
	if rf, ok := ret.Get(0).(func(...*deployments.DeviceDeployment) error); ok {
		r0 = rf(deployment...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceDeploymentLogAvailability provides a mock function with given fields: deviceID, deploymentID, log
func (_m *DeviceDeploymentStorage) UpdateDeviceDeploymentLogAvailability(deviceID string, deploymentID string, log bool) error {
	ret := _m.Called(deviceID, deploymentID, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(deviceID, deploymentID, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceDeploymentStatus provides a mock function with given fields: deviceID, deploymentID, status, finishTime
func (_m *DeviceDeploymentStorage) UpdateDeviceDeploymentStatus(deviceID string, deploymentID string, status string, finishTime *time.Time) (string, error) {
	ret := _m.Called(deviceID, deploymentID, status, finishTime)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, *time.Time) string); ok {
		r0 = rf(deviceID, deploymentID, status, finishTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, *time.Time) error); ok {
		r1 = rf(deviceID, deploymentID, status, finishTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ model.DeviceDeploymentStorage = (*DeviceDeploymentStorage)(nil)
