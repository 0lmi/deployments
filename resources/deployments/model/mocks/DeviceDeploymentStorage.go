// Copyright 2016 Mender Software AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package mocks

import context "context"
import deployments "github.com/mendersoftware/deployments/resources/deployments"
import images "github.com/mendersoftware/deployments/resources/images"
import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/deployments/resources/deployments/model"
import time "time"

// DeviceDeploymentStorage is an autogenerated mock type for the DeviceDeploymentStorage type
type DeviceDeploymentStorage struct {
	mock.Mock
}

// AbortDeviceDeployments provides a mock function with given fields: ctx, deploymentID
func (_m *DeviceDeploymentStorage) AbortDeviceDeployments(ctx context.Context, deploymentID string) error {
	ret := _m.Called(ctx, deploymentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggregateDeviceDeploymentByStatus provides a mock function with given fields: ctx, id
func (_m *DeviceDeploymentStorage) AggregateDeviceDeploymentByStatus(ctx context.Context, id string) (deployments.Stats, error) {
	ret := _m.Called(ctx, id)

	var r0 deployments.Stats
	if rf, ok := ret.Get(0).(func(context.Context, string) deployments.Stats); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(deployments.Stats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignArtifact provides a mock function with given fields: ctx, deviceID, deploymentID, artifact
func (_m *DeviceDeploymentStorage) AssignArtifact(ctx context.Context, deviceID string, deploymentID string, artifact *images.SoftwareImage) error {
	ret := _m.Called(ctx, deviceID, deploymentID, artifact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *images.SoftwareImage) error); ok {
		r0 = rf(ctx, deviceID, deploymentID, artifact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecommissionDeviceDeployments provides a mock function with given fields: ctx, deviceId
func (_m *DeviceDeploymentStorage) DecommissionDeviceDeployments(ctx context.Context, deviceId string) error {
	ret := _m.Called(ctx, deviceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistAssignedImageWithIDAndStatuses provides a mock function with given fields: ctx, id, statuses
func (_m *DeviceDeploymentStorage) ExistAssignedImageWithIDAndStatuses(ctx context.Context, id string, statuses ...string) (bool, error) {
	ret := _m.Called(ctx, id, statuses)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) bool); ok {
		r0 = rf(ctx, id, statuses...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllDeploymentsForDeviceIDWithStatuses provides a mock function with given fields: ctx, deviceID, statuses
func (_m *DeviceDeploymentStorage) FindAllDeploymentsForDeviceIDWithStatuses(ctx context.Context, deviceID string, statuses ...string) ([]deployments.DeviceDeployment, error) {
	ret := _m.Called(ctx, deviceID, statuses)

	var r0 []deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) []deployments.DeviceDeployment); ok {
		r0 = rf(ctx, deviceID, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, deviceID, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOldestDeploymentForDeviceIDWithStatuses provides a mock function with given fields: ctx, deviceID, statuses
func (_m *DeviceDeploymentStorage) FindOldestDeploymentForDeviceIDWithStatuses(ctx context.Context, deviceID string, statuses ...string) (*deployments.DeviceDeployment, error) {
	ret := _m.Called(ctx, deviceID, statuses)

	var r0 *deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *deployments.DeviceDeployment); ok {
		r0 = rf(ctx, deviceID, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, deviceID, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceDeploymentStatus provides a mock function with given fields: ctx, deploymentID, deviceID
func (_m *DeviceDeploymentStorage) GetDeviceDeploymentStatus(ctx context.Context, deploymentID string, deviceID string) (string, error) {
	ret := _m.Called(ctx, deploymentID, deviceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, deploymentID, deviceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, deploymentID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceStatusesForDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *DeviceDeploymentStorage) GetDeviceStatusesForDeployment(ctx context.Context, deploymentID string) ([]deployments.DeviceDeployment, error) {
	ret := _m.Called(ctx, deploymentID)

	var r0 []deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(context.Context, string) []deployments.DeviceDeployment); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasDeploymentForDevice provides a mock function with given fields: ctx, deploymentID, deviceID
func (_m *DeviceDeploymentStorage) HasDeploymentForDevice(ctx context.Context, deploymentID string, deviceID string) (bool, error) {
	ret := _m.Called(ctx, deploymentID, deviceID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, deploymentID, deviceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, deploymentID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMany provides a mock function with given fields: ctx, deployment
func (_m *DeviceDeploymentStorage) InsertMany(ctx context.Context, deployment ...*deployments.DeviceDeployment) error {
	ret := _m.Called(ctx, deployment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*deployments.DeviceDeployment) error); ok {
		r0 = rf(ctx, deployment...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceDeploymentLogAvailability provides a mock function with given fields: ctx, deviceID, deploymentID, log
func (_m *DeviceDeploymentStorage) UpdateDeviceDeploymentLogAvailability(ctx context.Context, deviceID string, deploymentID string, log bool) error {
	ret := _m.Called(ctx, deviceID, deploymentID, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, deviceID, deploymentID, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceDeploymentStatus provides a mock function with given fields: ctx, deviceID, deploymentID, status, finishTime
func (_m *DeviceDeploymentStorage) UpdateDeviceDeploymentStatus(ctx context.Context, deviceID string, deploymentID string, status string, finishTime *time.Time) (string, error) {
	ret := _m.Called(ctx, deviceID, deploymentID, status, finishTime)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *time.Time) string); ok {
		r0 = rf(ctx, deviceID, deploymentID, status, finishTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *time.Time) error); ok {
		r1 = rf(ctx, deviceID, deploymentID, status, finishTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ model.DeviceDeploymentStorage = (*DeviceDeploymentStorage)(nil)
