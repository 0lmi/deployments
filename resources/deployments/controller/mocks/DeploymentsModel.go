// Copyright 2017 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package mocks

import context "context"
import controller "github.com/mendersoftware/deployments/resources/deployments/controller"
import deployments "github.com/mendersoftware/deployments/resources/deployments"
import mock "github.com/stretchr/testify/mock"

// DeploymentsModel is an autogenerated mock type for the DeploymentsModel type
type DeploymentsModel struct {
	mock.Mock
}

// AbortDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *DeploymentsModel) AbortDeployment(ctx context.Context, deploymentID string) error {
	ret := _m.Called(ctx, deploymentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDeployment provides a mock function with given fields: ctx, constructor
func (_m *DeploymentsModel) CreateDeployment(ctx context.Context, constructor *deployments.DeploymentConstructor) (string, error) {
	ret := _m.Called(ctx, constructor)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *deployments.DeploymentConstructor) string); ok {
		r0 = rf(ctx, constructor)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *deployments.DeploymentConstructor) error); ok {
		r1 = rf(ctx, constructor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecommissionDevice provides a mock function with given fields: ctx, deviceID
func (_m *DeploymentsModel) DecommissionDevice(ctx context.Context, deviceID string) error {
	ret := _m.Called(ctx, deviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *DeploymentsModel) GetDeployment(ctx context.Context, deploymentID string) (*deployments.Deployment, error) {
	ret := _m.Called(ctx, deploymentID)

	var r0 *deployments.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string) *deployments.Deployment); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployments.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentForDeviceWithCurrent provides a mock function with given fields: ctx, deviceID, current
func (_m *DeploymentsModel) GetDeploymentForDeviceWithCurrent(ctx context.Context, deviceID string, current deployments.InstalledDeviceDeployment) (*deployments.DeploymentInstructions, error) {
	ret := _m.Called(ctx, deviceID, current)

	var r0 *deployments.DeploymentInstructions
	if rf, ok := ret.Get(0).(func(context.Context, string, deployments.InstalledDeviceDeployment) *deployments.DeploymentInstructions); ok {
		r0 = rf(ctx, deviceID, current)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployments.DeploymentInstructions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, deployments.InstalledDeviceDeployment) error); ok {
		r1 = rf(ctx, deviceID, current)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentStats provides a mock function with given fields: ctx, deploymentID
func (_m *DeploymentsModel) GetDeploymentStats(ctx context.Context, deploymentID string) (deployments.Stats, error) {
	ret := _m.Called(ctx, deploymentID)

	var r0 deployments.Stats
	if rf, ok := ret.Get(0).(func(context.Context, string) deployments.Stats); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(deployments.Stats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceDeploymentLog provides a mock function with given fields: ctx, deviceID, deploymentID
func (_m *DeploymentsModel) GetDeviceDeploymentLog(ctx context.Context, deviceID string, deploymentID string) (*deployments.DeploymentLog, error) {
	ret := _m.Called(ctx, deviceID, deploymentID)

	var r0 *deployments.DeploymentLog
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *deployments.DeploymentLog); ok {
		r0 = rf(ctx, deviceID, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployments.DeploymentLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, deviceID, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceStatusesForDeployment provides a mock function with given fields: ctx, deploymentID
func (_m *DeploymentsModel) GetDeviceStatusesForDeployment(ctx context.Context, deploymentID string) ([]deployments.DeviceDeployment, error) {
	ret := _m.Called(ctx, deploymentID)

	var r0 []deployments.DeviceDeployment
	if rf, ok := ret.Get(0).(func(context.Context, string) []deployments.DeviceDeployment); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployments.DeviceDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasDeploymentForDevice provides a mock function with given fields: ctx, deploymentID, deviceID
func (_m *DeploymentsModel) HasDeploymentForDevice(ctx context.Context, deploymentID string, deviceID string) (bool, error) {
	ret := _m.Called(ctx, deploymentID, deviceID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, deploymentID, deviceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, deploymentID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDeploymentFinished provides a mock function with given fields: ctx, deploymentID
func (_m *DeploymentsModel) IsDeploymentFinished(ctx context.Context, deploymentID string) (bool, error) {
	ret := _m.Called(ctx, deploymentID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupDeployment provides a mock function with given fields: ctx, query
func (_m *DeploymentsModel) LookupDeployment(ctx context.Context, query deployments.Query) ([]*deployments.Deployment, error) {
	ret := _m.Called(ctx, query)

	var r0 []*deployments.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, deployments.Query) []*deployments.Deployment); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*deployments.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, deployments.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDeviceDeploymentLog provides a mock function with given fields: ctx, deviceID, deploymentID, logs
func (_m *DeploymentsModel) SaveDeviceDeploymentLog(ctx context.Context, deviceID string, deploymentID string, logs []deployments.LogMessage) error {
	ret := _m.Called(ctx, deviceID, deploymentID, logs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []deployments.LogMessage) error); ok {
		r0 = rf(ctx, deviceID, deploymentID, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceDeploymentStatus provides a mock function with given fields: ctx, deploymentID, deviceID, status
func (_m *DeploymentsModel) UpdateDeviceDeploymentStatus(ctx context.Context, deploymentID string, deviceID string, status deployments.DeviceDeploymentStatus) error {
	ret := _m.Called(ctx, deploymentID, deviceID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, deployments.DeviceDeploymentStatus) error); ok {
		r0 = rf(ctx, deploymentID, deviceID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ controller.DeploymentsModel = (*DeploymentsModel)(nil)
